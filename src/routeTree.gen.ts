/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppCharactersRouteImport } from './routes/app/characters'
import { Route as AppCharacterCharacterIdRouteImport } from './routes/app/character/$characterId'

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppCharactersRoute = AppCharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCharacterCharacterIdRoute = AppCharacterCharacterIdRouteImport.update({
  id: '/character/$characterId',
  path: '/character/$characterId',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRoute
  '/app/character/$characterId': typeof AppCharacterCharacterIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRoute
  '/app/character/$characterId': typeof AppCharacterCharacterIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/characters': typeof AppCharactersRoute
  '/app/character/$characterId': typeof AppCharacterCharacterIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/app/characters' | '/app/character/$characterId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/app/characters' | '/app/character/$characterId'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/characters'
    | '/app/character/$characterId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/characters': {
      id: '/app/characters'
      path: '/characters'
      fullPath: '/app/characters'
      preLoaderRoute: typeof AppCharactersRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/character/$characterId': {
      id: '/app/character/$characterId'
      path: '/character/$characterId'
      fullPath: '/app/character/$characterId'
      preLoaderRoute: typeof AppCharacterCharacterIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppCharactersRoute: typeof AppCharactersRoute
  AppCharacterCharacterIdRoute: typeof AppCharacterCharacterIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppCharactersRoute: AppCharactersRoute,
  AppCharacterCharacterIdRoute: AppCharacterCharacterIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
